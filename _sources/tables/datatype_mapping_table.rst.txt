.. _datatype_mapping_table_rst:

=======   =============================   =================   =================   ==============================================================   ==================   ==================   ========================================
Schema    R                               C                   C++                 Fortran                                                          Matlab               Python               Notes                                   
=======   =============================   =================   =================   ==============================================================   ==================   ==================   ========================================
1darray   ``list``                        ``*``               ``*``               ``*``                                                            ``mat``              ``numpy.ndarray``                                            
array     ``list``                        ``json_array_t``    ``json_array_t``    ``yggarr``                                                       ``cell``             ``list``             Support for dynamic arrays in C/C++ is  
                                                                                                                                                                                             still under development.                
boolean   ``logical``                     ``bool``            ``bool``            ``logical(kind = X)``                                            ``logical``          ``bool``                                                     
bytes     ``char (utf-8)``                ``char*``           ``char*``           ``character(len = X)``                                           ``char (utf-8)``     ``bytes``            Precision X is preserved.               
complex   ``complex``                     ``complex_X``       ``complex_X``       ``complex(kind = X)``                                            ``complex``          ``numpy.complexX``   Precision X is preserved.               
float     ``double``                      ``double``          ``double``          ``real(kind = X)``                                               ``single, double``   ``numpy.floatX``     Precision X is preserved.               
int       ``integer, bit64::integer64``   ``intX_t``          ``intX_t``          ``integer(kind = X)``                                            ``intX``             ``numpy.intX``       Precision X is preserved.               
ndarray   ``list``                        ``*``               ``*``               ``*``                                                            ``mat``              ``numpy.ndarray``                                            
null      ``NA``                          ``void*``           ``void*``           ``yggnull``                                                      ``NaN``              ``None``                                                     
number                                                                                                                                                                                       This covers the JSON default for        
                                                                                                                                                                                             floating point or integer values.       
obj       ``ObjDict``                     ``obj_t``           ``obj_t``           ``yggobj``                                                       ``containers.Map``   ``ObjDict``                                                  
object    ``list``                        ``json_object_t``   ``json_object_t``   ``yggmap``                                                       ``containers.Map``   ``dict``             Support for dynamic objects in C/C++ is 
                                                                                                                                                                                             still under development.                
ply       ``PlyDict``                     ``ply_t``           ``ply_t``           ``yggply``                                                       ``containers.Map``   ``PlyDict``                                                  
scalar                                                                                                                                                                                       |yggdrasil| defines scalars as an       
                                                                                                                                                                                             umbrella type encompassing int, uint,   
                                                                                                                                                                                             float, bytes, and unicode.              
schema    ``list``                        ``schema_t``        ``schema_t``        ``yggschema``                                                    ``containers.Map``   ``dict``                                                     
string    ``character``                   ``string_t``        ``string_t``        ``character(len = X)``                                           ``char``             ``str``              Encoding dependent on JSON library.     
uint      ``integer``                     ``uintX_t``         ``uintX_t``         ``ygguintX``                                                     ``uintX``            ``numpy.uintX``      Precision X is preserved.               
unicode   ``char``                        ``unicode_t``       ``unicode_t``       ``character(kind = selected_char_kind('ISO_10646'), len = X)``   ``char``             ``str``              Precision X is preserved.               
=======   =============================   =================   =================   ==============================================================   ==================   ==================   ========================================